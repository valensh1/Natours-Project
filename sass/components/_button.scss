.btn {
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem; /* When two values entered the first one is padding for top and bottom and 2nd is for padding left/right */
        display: inline-block; /* Need to go to parent div container with class .text-box and place text-align : center to center this */
        border-radius: 10rem;
        transition: all .2s; /* must be on initial state which is the .btn:link and the .btn:visited */
        position: relative; /* Added this relative positioning so that the .btn::after could be positioned absolute. */
        font-size: $default-font-size;
    }

    &:hover {
        transform: translateY(-3px); /* Y axis goes from top to bottom so a positive number would move it down. We want to move the button up upon hover so you input a negative #. This will move it based upon its original position */ 
        box-shadow: 0 1rem 2rem rgba($color-black,.2); /* 0 is for shadow on x-axis left to right and 2nd value which is 10px converted to rem which is 1 rem is the y-axis and is the vertical shadow. The 3rd value is the blurriness. The higher the px the more blurry it is. RGBA is color and last value in rgba is the opacity or how visible an item is. The cloer to 1 the more visible it is and the closer to 0 the less visible it is */
        
        &::after {
            transform: scaleX(1.4) scaleY(1.6);
            opacity: 0;
        }
    }

    &:active { /* .btn:active is the pseudo class representing a button click */
        transform: translateY(-1px); /* This is -1px up from the original position of the button NOT from the hover. Since Y axis moves top to bottom a positive # moves it down and a negative # moves it up. We want button to move up when clicked so that's why we have negative # entered here. */
        box-shadow: 0 5rem 10rem rgba($color-black,.2); /* 0 is for shadow on x-axis left to right and 2nd value which is 10px is the y-axis and is the vertical shadow. The 3rd value is the blurriness. The higher the px the more blurry it is. RGBA is color and last value in rgba is the opacity or how visible an item is. The cloer to 1 the more visible it is and the closer to 0 the less visible it is */
    }

    &--white {
        background-color:$color-white;
        color: $color-grey-dark;
            
        &::after {
            background-color: $color-white;
        }
    }

    &::after {  /* Should match most of the properties from .btn:link and .btn:visited above as we want this to hide behind button and only be visible after we hover */
        content: ""; /* This is for putting content like text after something. In our case we don't want to put any text we just want this blank */
        display: inline-block; /* Need to keep same as .btn:link and .btn:visted above */
        height: 100%; /* Want it to be 100% of the height of .btn:link and .btn:visted above so it hides behind */
        width: 100%; /* Want it to be 100% of the height of .btn:link and .btn:visted above so it hides behind */
        border-radius: 10rem; /* Need to keep same as .btn:link and .btn:visted above */
        position: absolute;  /* Because .btn:link and .btn:visted above is positioned relative we can position this absolute */
        top: 0; 
        left: 0;
        z-index: -1; /* Use -1 to hide behind */
        transition: all .4s; /* All animations with .btn::after will perform in .4s */
    }

    &--animated {
        animation: moveInBottom .5s ease-out .75s; /* .5s is duration ease-out is style of animation and .75s is the delay */
        animation-fill-mode: backwards; /* This sets the animation to the first values in the keyframe and retain these values through the delay process (in this case .75s); moveInBottom @keyframe at 0% has an opacity of 0% so it is invisible. If we remove this line of code from our CSS the button is visible before the animation but including this line of code makes our button invisible = @keyframe rate of moveInBottom of 0% */
    }
}

.btn-text {
    &:link,
    &:visited {
        font-size: $default-font-size;
        color: $color-primary; /* Our green color */
        display: inline-block; /* Making inline block so we can use box model properties on it such as margin, padding, etc. */
        text-decoration: none;
        border-bottom: .1rem solid $color-primary;
        padding: .3rem;
    }

    &:hover {
        background-color: $color-primary;
        color: $color-white;
        box-shadow: 0 1rem 2rem rgba($color-black, .15); /* 0 is for shadow on x-axis left to right and 2nd value which is 10px converted to rem which is 1 rem is the y-axis and is the vertical shadow. The 3rd value is the blurriness. The higher the px the more blurry it is. RGBA is color and last value in rgba is the opacity or how visible an item is. The cloer to 1 the more visible it is and the closer to 0 the less visible it is */
        transform: translateY(-.2rem);

    }

    &:active {
        box-shadow: 0 1rem 2rem rgba($color-black, .15); /* 0 is for shadow on x-axis left to right and 2nd value which is 10px converted to rem which is 1 rem is the y-axis and is the vertical shadow. The 3rd value is the blurriness. The higher the px the more blurry it is. RGBA is color and last value in rgba is the opacity or how visible an item is. The cloer to 1 the more visible it is and the closer to 0 the less visible it is */
        transform: translateY(0);
    }
}
