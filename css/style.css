/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* { /*    * - Is the universal selector that selects everything  */
    margin: 0; /* Eliminates browser default margins as we want to start clean */
    padding: 0; /* Eliminates browser default padding as we want to start clean */
    box-sizing: border-box; /* Eliminates margins and padding in width and height of box */
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    height: 95vh; /* 95% of the view height on the screen */
    background-image: linear-gradient(
        to right bottom,  /* gradient runs from right to bottom */
        rgba(126, 213, 111, 0.8), /* opacity number on end (0.8) allows you to see less of image the closer it is to 1. The closer to 0 the less gradient color you see and you see more of the original image */
        rgba(40, 180, 131, 0.8)), /* opacity number on end (0.8) allows you to see less of image the closer it is to 1. The closer to 0 the less gradient color you see and you see more of the original image */
         url(../img/hero.jpg);
    background-size: cover; /* Background image will cover size of box */
    background-position: top; /* Will always keep background image top in screen view; This will never get cropped out; Bottom/right/left could get cropped out based on resizing of screen */
    position: relative;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); /* This is the shape in the header section; Each two numbers in parenthesis before each comma represent the x and y coordinate; The measurements start from top left corner to top right corner to bottom right corner to then bottom left corner; 100% is the x coordinate that goes horizontally so the top right corner needs the x to go 100% over to the right side and the y coordinate which is the vertical axis would be 0 since we want it to stay at the top */
    /* clip-path: polygon(50% 0, 100% 100%, 0 100%) /* Example triangle clip-path; Starting at top you only need one point so you need the 50% because you need it to move over 50% on horizontal x-axis and 0 for y-axis because you need it to stay at top. Then the right corner goes next at 100% since you need it all the way to right and 100% for vertical y-axis as you need it to go to the bottom. The left corner x-axis stays at 0 because you don't want that to move but the y-vertical axis should go down 100% */   
} 

.logo-box {
position: absolute;
top: 40px;
left: 40px;
}

.logo {
    height: 35px;
}

.text-box {
    position: absolute; /* Will position according to its nearest parent that is positioned relative */
    top: 40%; /* Brings text-box down 50% */
    left: 50%; /* Brings text-box left 50% */
    transform: translate(-50%, -50%); /* Problem with top 50% and left 50% above is it puts everything at the start of the screen at those measurements WITHOUT taking into account the length of the text-box and the height of the text-box. Transform: translate is the property to use to fix this and takes 2 arguments the first being the width and the second being the height. */
  }

.heading-primary {
color: #fff;
text-transform: uppercase;
backface-visibility: hidden; /* This fixes any unknown shakiness in animation */
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 700;
    letter-spacing: 35px;
    animation-name: moveInLeft; /* Can specify each animation property separately or do it on one line like in .heading-primary-sub below */
    animation-duration: 1s;
    animation-timing-function: ease-out;
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 400;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out; /* All animation properties specified in one line instead of listing out each one separately on to its own line like .heading-primary-main above. These properties could be listed out in any order. Order does not matter here. */
   
}

@keyframes moveInLeft {
    0% {
        opacity: 0; /* Beginning of animation we want the property to be invisible */
        transform: translateX(-100px); /* x axis goes from left to right so a positive number makes it go further right but we want this to come in from left and go right so we put it as a negative number because we want it to start out 100px to the left from its normal starting position */
    }

    80% {
        transform: translateX(10px); /* At 80% of animation we want the text to go further right than its normal position by 10px */
    }

    100% {
        opacity: 1; /* End of animation we want the property to be invisible */
        transform: translate(0); /* 0 will end animation at its final ending spot which is equivalent to where it would show on page if there was no animation on page. */
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0; /* Beginning of animation we want the property to be invisible */
        transform: translateX(100px); /* x axis goes from left to right so a positive number makes it go further right from its normal starting position */
    }

    80% {
        transform: translateX(-10px); /* At 80% of animation we want the text to go further left than its normal position by 10px */
    }

    100% {
        opacity: 1; /* End of animation we want the property to be invisible */
        transform: translate(0); /* 0 will end animation at its final ending spot which is equivalent to where it would show on page if there was no animation on page. */
    }
}

